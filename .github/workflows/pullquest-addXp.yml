name: PullQuestAI Bonus XP

on:
  issue_comment:
    types: [created]

jobs:
  handle-bonus-xp:
    # Run on both issue and PR comments
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
    env:
      BACKEND_URL: https://pullquestgithubbackend-1.onrender.com
    
    steps:
    - name: üîç Debug - Show all event data
      run: |
        echo "================================================"
        echo "üîç FULL EVENT CONTEXT DEBUG"
        echo "================================================"
        echo "Event name: ${{ github.event_name }}"
        echo "Action: ${{ github.event.action }}"
        echo "Issue/PR number: ${{ github.event.issue.number }}"
        echo "Is Pull Request: ${{ github.event.issue.pull_request != null }}"
        echo "Comment ID: ${{ github.event.comment.id }}"
        echo "Comment author: ${{ github.event.comment.user.login }}"
        echo "Repository: ${{ github.event.repository.full_name }}"
        echo ""
        echo "üìù RAW COMMENT BODY:"
        echo "---START---"
        echo '${{ github.event.comment.body }}'
        echo "---END---"
        echo ""
        echo "üìè Comment length: ${#comment_body}"
        echo "================================================"
    
    - name: Check if comment mentions @pullquestai and adds XP
      id: check-comment
      run: |
        # Store comment in variable with proper quoting
        comment_body='${{ github.event.comment.body }}'
        
        echo "üîç Starting comment analysis..."
        echo "Comment content: [$comment_body]"
        echo ""
        
        # Test individual conditions
        echo "üß™ Testing pattern matching..."
        
        if echo "$comment_body" | grep -i "@pullquestai"; then
          echo "‚úÖ Found '@pullquestai' in comment"
        else
          echo "‚ùå Did NOT find '@pullquestai' in comment"
        fi
        
        if echo "$comment_body" | grep -i "add"; then
          echo "‚úÖ Found 'add' in comment"
        else
          echo "‚ùå Did NOT find 'add' in comment"
        fi
        
        if echo "$comment_body" | grep -i "xp"; then
          echo "‚úÖ Found 'xp' in comment"
        else
          echo "‚ùå Did NOT find 'xp' in comment"
        fi
        
        if echo "$comment_body" | grep -i "to @"; then
          echo "‚úÖ Found 'to @' in comment"
        else
          echo "‚ùå Did NOT find 'to @' in comment"
        fi
        
        echo ""
        echo "üîç Attempting to extract XP amount..."
        xp_test=$(echo "$comment_body" | grep -oP '@pullquestai add \K\d+(?=\s*xp)' | head -1)
        echo "Extracted XP: [$xp_test]"
        
        echo ""
        echo "üîç Attempting to extract username..."
        user_test=$(echo "$comment_body" | grep -oP 'xp to @\K[a-zA-Z0-9_-]+' | head -1)
        echo "Extracted username: [$user_test]"
        
        echo ""
        echo "üéØ FINAL DECISION:"
        
        # Main condition check
        if echo "$comment_body" | grep -q "@pullquestai add" && echo "$comment_body" | grep -q "xp to @"; then
          echo "trigger_action=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Bonus XP request DETECTED!"
          
          # Extract XP amount
          xp_amount=$(echo "$comment_body" | grep -oP '@pullquestai add \K\d+(?=\s*xp)' | head -1)
          echo "xp_amount=$xp_amount" >> $GITHUB_OUTPUT
          
          # Extract username
          username=$(echo "$comment_body" | grep -oP 'xp to @\K[a-zA-Z0-9_-]+' | head -1)
          echo "username=$username" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üìä EXTRACTED VALUES:"
          echo "  XP Amount: $xp_amount"
          echo "  Username: $username"
          
          # Validate extractions
          if [ -z "$xp_amount" ]; then
            echo "‚ö†Ô∏è WARNING: XP amount is empty!"
          fi
          if [ -z "$username" ]; then
            echo "‚ö†Ô∏è WARNING: Username is empty!"
          fi
        else
          echo "trigger_action=false" >> $GITHUB_OUTPUT
          echo "‚ùå Not a bonus XP request, skipping..."
          echo ""
          echo "üí° Expected format: '@pullquestai add [number] xp to @[username]'"
          echo "üí° Example: '@pullquestai add 30 xp to @aryan123'"
        fi
        
        echo "================================================"
    
    - name: Debug ‚Äì print extracted info
      if: steps.check-comment.outputs.trigger_action == 'true'
      run: |
        echo "================================================"
        echo "‚úÖ PROCEEDING WITH XP AWARD"
        echo "================================================"
        echo "üîç Issue/PR #  : ${{ github.event.issue.number }}"
        echo "üîç Is PR?      : ${{ github.event.issue.pull_request != null }}"
        echo "üîç Requester   : ${{ github.event.comment.user.login }}"
        echo "üîç XP Amount   : ${{ steps.check-comment.outputs.xp_amount }}"
        echo "üîç Target User : ${{ steps.check-comment.outputs.username }}"
        echo "üîç Repo        : ${{ github.event.repository.full_name }}"
        echo "================================================"
    
    - name: Build payload ‚ûú POST to backend
      if: steps.check-comment.outputs.trigger_action == 'true'
      run: |
        echo "üîß Building API payload..."
        
        ISSUE_NUMBER=${{ github.event.issue.number }}
        REQUESTER="${{ github.event.comment.user.login }}"
        XP_AMOUNT=${{ steps.check-comment.outputs.xp_amount }}
        TARGET_USERNAME="${{ steps.check-comment.outputs.username }}"
        IS_PR="${{ github.event.issue.pull_request != null }}"
        
        echo "Raw values:"
        echo "  ISSUE_NUMBER: $ISSUE_NUMBER"
        echo "  REQUESTER: $REQUESTER"
        echo "  XP_AMOUNT: $XP_AMOUNT"
        echo "  TARGET_USERNAME: $TARGET_USERNAME"
        echo "  IS_PR: $IS_PR"
        
        payload=$(jq -n \
          --arg owner         "${{ github.event.repository.owner.login }}" \
          --arg repo          "${{ github.event.repository.name }}" \
          --arg requester     "$REQUESTER" \
          --arg targetUser    "$TARGET_USERNAME" \
          --arg isPR          "$IS_PR" \
          --argjson issueNumber  "$ISSUE_NUMBER" \
          --argjson xpAmount  "$XP_AMOUNT" \
          '{
            owner: $owner,
            repo: $repo, 
            issueNumber: $issueNumber,
            isPullRequest: ($isPR == "true"),
            requester: $requester,
            targetUser: $targetUser,
            xpAmount: $xpAmount
          }')
        
        echo ""
        echo "üì¶ Final Payload:"
        echo "$payload" | jq '.'
        echo ""
        
        max_retries=3
        retry_count=0
        success=false
        
        while [ $retry_count -lt $max_retries ] && [ "$success" = false ]; do
          echo "================================================"
          echo "üîÑ API Call Attempt $((retry_count + 1)) of $max_retries"
          echo "================================================"
          echo "Endpoint: $BACKEND_URL/api/hactoberfest/ContributorXp"
          echo "Method: POST"
          echo ""
          
          http_code=$(curl --silent --output /tmp/response.txt --write-out "%{http_code}" \
            --max-time 90 \
            -X POST "$BACKEND_URL/api/hactoberfest/ContributorXp" \
            -H "Content-Type: application/json" \
            --data-raw "$payload")
          
          echo "üì° HTTP Status: $http_code"
          echo "üìÑ Response Body:"
          cat /tmp/response.txt
          echo ""
          
          if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
            echo "‚úÖ Success! HTTP $http_code"
            success=true
            echo "success=true" >> $GITHUB_OUTPUT
          elif [ "$http_code" = "403" ]; then
            echo "‚ùå Unauthorized - requester not in allowed list"
            echo "error=unauthorized" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚ö†Ô∏è Failed with HTTP $http_code"
            retry_count=$((retry_count + 1))
            
            if [ $retry_count -lt $max_retries ]; then
              echo "‚è≥ Waiting 45 seconds for service to wake up..."
              sleep 45
            fi
          fi
        done
        
        if [ "$success" = false ]; then
          echo "‚ùå All retries failed after $max_retries attempts"
          echo "error=timeout" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Post error comment if failed
      if: failure() && steps.check-comment.outputs.trigger_action == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const errorType = '${{ steps.api_call.outputs.error }}';
          let message = '‚ùå **Failed to award XP**\n\n';
          
          if (errorType === 'unauthorized') {
            message += 'You do not have permission to award XP. Only organization owners can use this command.';
          } else if (errorType === 'timeout') {
            message += 'The backend service is not responding. Please try again in a few minutes.';
          } else {
            message += 'An unexpected error occurred. Please check the workflow logs.';
          }
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });
    
    - name: React to comment
      if: steps.check-comment.outputs.trigger_action == 'true' && steps.api_call.outputs.success == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'rocket'
          });
    
    - name: ‚úÖ Workflow Complete
      if: always()
      run: |
        echo "================================================"
        echo "üèÅ WORKFLOW EXECUTION COMPLETE"
        echo "================================================"
        if [ "${{ steps.check-comment.outputs.trigger_action }}" = "true" ]; then
          if [ "${{ steps.api_call.outputs.success }}" = "true" ]; then
            echo "‚úÖ PullQuestAI backend notified for bonus XP award"
          else
            echo "‚ùå Failed to notify backend"
          fi
        else
          echo "‚ÑπÔ∏è  Comment did not trigger XP award action"
        fi
        echo "================================================"